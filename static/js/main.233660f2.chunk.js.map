{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-redusers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","changeFilter","createAction","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","axios","defaults","baseURL","getContacts","state","contacts","getFilter","filter","getFilterContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","className","s","form","onSubmit","e","preventDefault","find","alert","uuidv4","a","contactsActions","post","data","lable","input","type","value","pattern","title","onChange","target","required","submitBtn","PropsType","PropTypes","func","isRequired","ContactList","onDeleteClick","id","delete","deleteContacts","useEffect","get","contactList","map","icon","buttonDelete","onClick","Filter","findFild","inputFind","App","createReducer","payload","_","rootReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.233660f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__3Fj91\",\"buttonDelete\":\"ContactList_buttonDelete__37qVH\",\"icon\":\"ContactList_icon__pGNiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFild\":\"Filter_findFild__2p_Xp\",\"inputFind\":\"Filter_inputFind__3_BRw\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// export const addContact = createAction('contact/add');\r\n// export const deleteContact = createAction('contact/delete');\r\n\r\nexport const changeFilter= createAction('contact/filter');\r\n\r\n\r\nexport const fetchContactsRequest=createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess=createAction('contacts/ fetchContactsSuccess');\r\nexport const fetchContactsError=createAction('contacts/ fetchContactsError');\r\n\r\n\r\nexport const addContactsRequest=createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess=createAction('contacts/ addContactsSuccess');\r\nexport const addContactsError=createAction('contacts/ addContactsError');\r\n\r\nexport const deleteContactsRequest=createAction('contacts/deleteContactsRequest');\r\nexport const deleteContactsSuccess=createAction('contacts/ deleteContactsSuccess');\r\nexport const deleteContactsError=createAction('contacts/ deleteContactsError');","import *as contactsActions from './contacts-actions';\r\n\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL='http://localhost:4040';\r\n// import { createAsyncThunk } from '@reduxjs/toolkit';\r\nexport const fetchContacts=()=>async dispatch=>{\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n    try {\r\n    const {data}=await axios.get('/contacts');\r\n    dispatch(contactsActions.fetchContactsSuccess(data));\r\n    }catch(error){\r\n    dispatch(contactsActions.fetchContactsError(error));\r\n    }\r\n};\r\n\r\nexport const addContacts=()=>async dispatch=>{\r\n    dispatch(contactsActions.addContactsRequest());\r\n    try {\r\n    const {data}=await axios.post('/contacts');\r\n    dispatch(contactsActions.addContactsSuccess(data));\r\n    }catch(error){\r\n    dispatch(contactsActions.addContactsError(error));\r\n    }\r\n};\r\n\r\nexport const deleteContacts=id=>async dispatch=>{\r\n    dispatch(contactsActions.deleteContactsRequest());\r\n    try {\r\n    const {data}=await axios.delete(`/contacts/${id}`);\r\n    dispatch(contactsActions.deleteContactsSuccess(data));\r\n    }catch(error){\r\n    dispatch(contactsActions.deleteContactsError(error));\r\n    }\r\n};\r\n\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport  const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getFilterContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts,filter)=>\r\n  contacts.filter(contact=>contact.name.toLowerCase().includes(filter.toLowerCase())\r\n));\r\n\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {addContacts} from 'redux/contacts/contact-operations';\r\nimport {getContacts} from 'redux/contacts/contacts-selectors';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    \r\n    const findContact = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (findContact) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    } else {\r\n      dispatch(addContacts({ \r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n       })\r\n       );\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <form  className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.lable}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={e => setName(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={s.lable}>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={e => setNumber(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={s.submitBtn}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.PropsType = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { MdContactPhone } from 'react-icons/md';\r\nimport {getFilterContacts} from 'redux/contacts/contacts-selectors';\r\nimport {fetchContacts,deleteContacts} from'redux/contacts/contact-operations';\r\nimport s from './ContactList.module.css';\r\n\r\n export default function ContactList() {\r\n  const contacts=useSelector( getFilterContacts);\r\n  const dispatch=useDispatch();\r\n  const onDeleteClick=(id)=>dispatch(deleteContacts(id));\r\n \r\n  useEffect(()=>dispatch(fetchContacts()[dispatch]));\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className={s.contact}>\r\n            <MdContactPhone className={s.icon} />\r\n            <p>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              className={s.buttonDelete}\r\n              type=\"button\"\r\n              onClick={()=>onDeleteClick(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDeleteClick: PropTypes.func,\r\n};\r\n\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n// import{connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { changeFilter } from 'redux/contacts/contacts-actions';\r\nimport { getFilter } from 'redux/contacts/contacts-selectors';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = e => dispatch(changeFilter(e.target.value));\r\n\r\n  return (\r\n    <label className={s.findFild}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.inputFind}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\n// const mapStateToProps=state=>({value:state.filter});\r\n// const mapDispatchToProps=dispatch=>({\r\n//   onChange:e=>dispatch(changeFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n","\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\n export default function App() {\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm  />\n      <h2>Contacts </h2>\n      <Filter />\n      <ContactList/>\n    </div>\n  );\n};","import { createReducer, createSlice } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport*as contactsActions from './contacts-actions';\r\n// import initialContacts from '../../data.json';\r\n\r\n\r\n\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]:(state,{payload})=>payload,\r\n  [contactsActions.addContactsSuccess]: (state, { payload }) => [payload, ...state],\r\n\r\n  [contactsActions.deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// const contacts = createReducer([], {\r\n//   [addContact]: (state, { payload }) => [payload, ...state],\r\n//   // [fetchContacts.fulfilled]: (state, { payload }) => [payload, ...state],\r\n//   [deleteContact]: (state, { payload }) =>\r\n//     state.filter(contact => contact.id !== payload),\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\nexport default rootReducer;\r\n\r\n\r\n// const contactSlice=createSlice({\r\n//   name:'contacts',\r\n//   initialState:{ entities:[], filter:'', error:null},\r\n//   reducers:{\r\n//     [addContact]: (state, { payload }) => [payload, ...state],\r\n//     [deleteContact]: (state, { payload }) =>state.filter(contact => contact.id !== payload),\r\n//     [changeFilter]: (_, { payload }) => payload,    \r\n//   },\r\n//   extraReducers:{\r\n//     [fetchContacts.fulfilled]: (state, { payload }) => {\r\n//       return {contacts: payload, ...state};\r\n//     }\r\n//   }\r\n// })\r\n\r\n// export default contactSlice.reducer;\r\n","import rootReducer from './contacts/contacts-redusers';\r\nimport { configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n  } from 'redux-persist';\r\n  \r\n  const middleware = [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n    logger,\r\n  ];\r\n  \r\nconst store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store ={store}> \n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2_ty4\",\"lable\":\"ContactForm_lable__28HF6\",\"input\":\"ContactForm_input__2QX1I\",\"submitBtn\":\"ContactForm_submitBtn__1y2SO\"};"],"sourceRoot":""}