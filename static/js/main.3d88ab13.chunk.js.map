{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-redusers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","changeFilter","createAction","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","axios","defaults","baseURL","getContacts","state","contacts","getFilter","filter","getFilterContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","id","uuidv4","saveContacts","a","contactsActions","post","data","addContacts","className","s","form","onSubmit","e","preventDefault","find","alert","lable","input","type","value","pattern","title","onChange","target","required","submitBtn","PropsType","PropTypes","func","isRequired","ContactList","onDeleteClick","delete","deleteContacts","useEffect","get","contactList","map","icon","buttonDelete","onClick","Filter","findFild","inputFind","App","createReducer","_","payload","rootReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d88ab13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__3Fj91\",\"buttonDelete\":\"ContactList_buttonDelete__37qVH\",\"icon\":\"ContactList_icon__pGNiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFild\":\"Filter_findFild__2p_Xp\",\"inputFind\":\"Filter_inputFind__3_BRw\"};","import { createAction,  } from '@reduxjs/toolkit';\r\n\r\n// export const addContact = createAction('contact/add');\r\n// export const deleteContact = createAction('contact/delete');\r\n\r\nexport const changeFilter= createAction('contact/filter');\r\n\r\n\r\nexport const fetchContactsRequest=createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess=createAction('contacts/ fetchContactsSuccess');\r\nexport const fetchContactsError=createAction('contacts/ fetchContactsError');\r\n\r\n\r\nexport const addContactsRequest=createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess=createAction('contacts/ addContactsSuccess');\r\nexport const addContactsError=createAction('contacts/ addContactsError');\r\n\r\nexport const deleteContactsRequest=createAction('contacts/deleteContactsRequest');\r\nexport const deleteContactsSuccess=createAction('contacts/ deleteContactsSuccess');\r\nexport const deleteContactsError=createAction('contacts/ deleteContactsError');\r\n\r\n","import * as contactsActions from './contacts-actions';\r\n// import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(contactsActions.fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(contactsActions.fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContacts =\r\n  ({ id,name, number }) =>\r\n  async dispatch => {\r\n    const contact = {\r\n      id,\r\n      name,\r\n      number,\r\n    };\r\n    dispatch(contactsActions.addContactsRequest());\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(contactsActions.addContactsSuccess(data));\r\n    } catch (error) {\r\n      dispatch(contactsActions.addContactsError(error));\r\n    }\r\n  };\r\n\r\nexport const deleteContacts = id => async dispatch => {\r\n  dispatch(contactsActions.deleteContactsRequest());\r\n  try {\r\n     await axios.delete(`/contacts/${id}`);\r\n    dispatch(contactsActions.deleteContactsSuccess(id));\r\n  } catch (error) {\r\n    dispatch(contactsActions.deleteContactsError(error));\r\n  }\r\n};\r\n\r\n// export const fetchContacts= createAsyncThunk(\r\n//     'contacts/fetchContacts',\r\n//     async()=>{\r\n//         const contacts=await axios.get('/contacts');\r\n//         return contacts;\r\n//     });\r\n// export const addContacts= createAsyncThunk(\r\n//         'contacts/fetchContacts',\r\n//         async()=>{  \r\n//             const contacts=await axios.post('/contacts');\r\n//             return contacts;\r\n//         });    \r\n\r\n// export const deleteContacts= createAsyncThunk(\r\n//             'contacts/fetchContacts',\r\n//             async(id)=>{\r\n//                 const contacts=await axios.delete(`/contacts/${id}`);\r\n//                 return contacts;\r\n//             });    ","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport  const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getFilterContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts,filter)=>\r\n  contacts.filter(contact=>contact.name.toLowerCase().includes(filter.toLowerCase())\r\n));\r\n\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {addContacts} from 'redux/contacts/contact-operations';\r\nimport {getContacts} from 'redux/contacts/contacts-selectors';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const contact = {id: uuidv4(),name,number};\r\n  const saveContacts=contact=>dispatch(addContacts(contact));\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    \r\n    const findContact = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (findContact) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    } else {\r\n      saveContacts(contact);\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <form  className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.lable}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={e => setName(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={s.lable}>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={e => setNumber(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={s.submitBtn}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.PropsType = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { MdContactPhone } from 'react-icons/md';\r\nimport {getFilterContacts} from 'redux/contacts/contacts-selectors';\r\nimport {fetchContacts, deleteContacts} from'redux/contacts/contact-operations';\r\nimport s from './ContactList.module.css';\r\n\r\n export default function ContactList() {\r\n  const contacts=useSelector( getFilterContacts);\r\n  const dispatch=useDispatch();\r\n  const onDeleteClick=(id)=>dispatch(deleteContacts(id));\r\n  useEffect(()=>dispatch(fetchContacts()),[dispatch]);\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className={s.contact}>\r\n            <MdContactPhone className={s.icon} />\r\n            <p>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              className={s.buttonDelete}\r\n              type=\"button\"\r\n              onClick={()=>onDeleteClick(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDeleteClick: PropTypes.func,\r\n};\r\n\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n// import{connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { changeFilter } from 'redux/contacts/contacts-actions';\r\nimport { getFilter } from 'redux/contacts/contacts-selectors';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = e => dispatch(changeFilter(e.target.value));\r\n\r\n  return (\r\n    <label className={s.findFild}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.inputFind}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\n  export default function App() {\n  \n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm  />\n      <h2>Contacts </h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\n\n\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport*as contactsActions from './contacts-actions';\r\n\r\n\r\n\r\n\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]:(_,{payload})=>payload,\r\n  [contactsActions.addContactsSuccess]: (state, { payload }) => [payload, ...state],\r\n\r\n  [contactsActions.deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({id})=> id !== payload),\r\n});\r\n\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\nexport default rootReducer;\r\n\r\n\r\n","import rootReducer from './contacts/contacts-redusers';\r\nimport { configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n  } from 'redux-persist';\r\n  \r\n  const middleware = [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n    logger,\r\n  ];\r\n  \r\nconst store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store ={store}> \n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2_ty4\",\"lable\":\"ContactForm_lable__28HF6\",\"input\":\"ContactForm_input__2QX1I\",\"submitBtn\":\"ContactForm_submitBtn__1y2SO\"};"],"sourceRoot":""}